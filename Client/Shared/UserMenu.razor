@using Blazored.LocalStorage
@using Client.Providers
<AuthorizeView>
    <Authorized>
        <MudMenu FullWidth="true">
            <ActivatorContent>
                <MudChip Icon="@Icons.Material.Filled.Person" Color="Color.Primary">Account</MudChip>
            </ActivatorContent>
            <ChildContent>
                <MudMenuItem>Profile</MudMenuItem>
                <MudMenuItem>Theme</MudMenuItem>
                <MudMenuItem>Usage</MudMenuItem>
                <MudMenuItem OnClick="SignOut">Sign Out</MudMenuItem>
            </ChildContent>
        </MudMenu>
    </Authorized>

    <NotAuthorized>
        <MudButton Href="/signin" Icon="@Icons.Filled.Login" Variant="Variant.Filled" Color="Color.Primary">Sign In</MudButton>
        <MudButton Href="/register" Icon="@Icons.Filled.Create" Variant="Variant.Filled" Color="Color.Primary">Register</MudButton>
    </NotAuthorized>
</AuthorizeView>

@code {
    [Inject] ILocalStorageService LocalStorageService{ get; set; }
    [Inject] AuthenticationStateProvider AuthenticationStateProvider{ get; set; }
    [Inject] NavigationManager NavigationManager{ get; set; }
    
    private async Task SignOut()
    {
        if(await LocalStorageService.ContainKeyAsync("bearerToken"))
        {
            await LocalStorageService.RemoveItemAsync("bearerToken");
            ((AppAuthenticationStateProvider)AuthenticationStateProvider).SignOut();
        }

        StateHasChanged();
        NavigationManager.NavigateTo("/");
    }
}
